#!/usr/bin/env node

/**
 * Module dependencies.
 */
const fs = require('fs');
const https = require('https');
const app = require('../app');
const logger = require('../utils/logger');
const Manager = require('../Manager');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3031');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = https.createServer({
  key: fs.readFileSync('utils/server.key'),
  cert: fs.readFileSync('utils/server.cert'),
}, app);

/**
 * Integrate socket.io
 */
const io = require('socket.io')(server);

app.set('io', io);

const manager = Manager.init(io);
app.set('manager', manager);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const nrPort = parseInt(val, 10);

  if (Number.isNaN(nrPort)) {
    // named pipe
    return val;
  }

  if (nrPort >= 0) {
    // port number
    return nrPort;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      // eslint-disable-next-line no-console
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      // eslint-disable-next-line no-console
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  logger.success(`HTTPS server listening on ${bind}`);
}
